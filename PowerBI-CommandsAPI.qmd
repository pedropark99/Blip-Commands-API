---
title: "Conectando o Power BI com o Blip Commands API"
author: "Pedro Duarte Faria"
format: revealjs
execute:
  echo: true
---

```{python configs}
#| include: false
exec(open("../../botKey.py").read())
exec(open("src/APICommands.py").read())



def get_event_track(
                     botKey: str, tracking: str,
                     startDate: datetime.date, endDate: datetime.date,
                     take = 500, action = None
                   ) -> pandas.DataFrame:
                     
  if action is None:
    components = tracking
  else:
    components = [tracking, action]
    
  if action is not None and take > 500:
    raise ValueError("When you define an action to be searched, the `take` argument can not be greater than 500. If you want use more than 500 in `take`, then, do not specify the `action` argument.")
                     
  uri = APICommandsURI('/event-track', components)
  header = RequestHeader(botKey)
  query_string = QueryString(startDate = startDate, endDate = endDate, take = take)
  body = RequestBody(uri, query_string)
  
  request = APICommandsRequest(body, header)
  results = request.to_pandas_dataframe()
  
  if action is not None:
    results = results.drop("extras", axis = 1, errors = 'ignore')
  
  return results

```




## O que √© o Blip Commands API?

√â uma API que te permite enviar **comandos** para o Blip. 


## O que √© o Blip Commands API?

Dentre esses comandos dispon√≠veis, podemos coletar dados **em tempo real** de nosso contato inteligente. 


## Consequ√™ncia

O Databricks possui a limita√ß√£o de seus dados serem em D - 1. J√° o Commands API **n√£o enfrenta essa limita√ß√£o.**


## Consequ√™ncia

Como resultado, com o Commands API, n√≥s n√£o precisamos esperar o dia seguinte para termos acesso aos dados do dia atual!!!ü§Øüî≠



## Em resumo

...qual o objetivo desta apresenta√ß√£o?


## Em resumo

...qual o objetivo desta apresenta√ß√£o?

**Apresentar o Commands API como uma solu√ß√£o de dados em tempo real mais flex√≠vel e eficiente do que os relat√≥rios personalizados do Blip.**



## Relat√≥rios personalizados do Blip

Vantagens:

- Capaz de entregar dados do dia;
- R√°pido e simples de se configurar;

Desvantagens:

- Simples at√© demais;
- N√£o permite customiza√ß√£o;


## Commands API

- Permite a constru√ß√£o de uma **solu√ß√£o personalizada**;
- **Experi√™ncia** infinitamente melhor para o cliente; 

Podemos utilizar o programa/framework de nossa prefer√™ncia: 

- Power BI;
- `{shiny}` e `{flexdashboard}` (R);
- `{plotly}` e `{dash}` (Python);

<!-- ## Mas como eu posso fornecer esses dados? -->

<!-- - Voc√™ pode orientar o cliente a como utilizar o Commands API; -->
<!-- - Um Power BI que consome os dados do Commands API; -->
<!-- - Um JOB que envia (periodicamente) os dados mais recentes do Commands API; -->
<!-- - Os DEVs de sua c√©lula podem te ajudar a construir um plugin do Blip que converse com o Commands API; -->


## Um exemplo pr√°tico com Power BI

Nos pr√≥ximos slides vamos mostrar como seria o fluxo de trabalho do Power BI com os dados do Commands API.


## Passos

- Criar um notebook (em Python) que consulta os dados do Commands API, e, salva esses dados em uma tabela f√≠sica do Databricks;
- Puxamos essa tabela para o Power BI, e, desenvolvemos os nossos visuais;
- Por √∫ltimo, publique o seu Power BI e o seu notebook para serem atualizados de hora em hora;


## Fluxo de dados

![](Figuras/PowerPoint/fluxo-dados.png)


## Temos uma biblioteca nova! ü•≥

Para facilitar o uso da Commands API, duas fun√ß√µes foram desenvolvidas para os APIN's:

- `get_event_track()`;
- `get_attendants_report()`;



## `get_event_track()`

Essa fun√ß√£o possui os seguintes argumentos:

- `botKey`: a chave de autentica√ß√£o do bot;
- `tracking`: a *category* do tracking;
- `startDate`: a data de in√≠cio da pesquisa;
- `endDate`: a data de fim da pesquisa;
- `take` (**opcional**): quantidade m√°xima de resultados que voc√™ deseja trazer;
- `action` (**opcional**): a *action* espec√≠fica que voc√™ deseja pesquisar;


## Exemplos:

```{python}
#| eval: true
from datetime import date
dia_pesquisa = date(2022,7,7)
resultado = get_event_track(
  botKey, 
  tracking = "Sodexo consulta solicitacao e bloqueio selecao",
  startDate = dia_pesquisa, endDate = dia_pesquisa
)

print(resultado)
```


## Uma combina√ß√£o espec√≠fica de Category X Action:

```{python}
resultado = get_event_track(
  botKey, 
  tracking = "Sodexo consulta solicitacao e bloqueio selecao",
  action = 'Bloquear cartao',
  startDate = '2022-07-07', endDate = '2022-07-08'
)

print(resultado)
```


## `get_attendants_report()`

Essa fun√ß√£o possui os seguintes argumentos:

- `botKey`: a chave de autentica√ß√£o do bot;
- `startDate`: a data de in√≠cio da pesquisa;
- `endDate`: a data de fim da pesquisa;


## Exemplos:

```{python}
#| eval: false
from datetime import date
resultado = get_attendants_report(
  botKey, 
  startDate = date(2022,7,5), endDate = date(2022,7,11)
)

print(resultado)
```

```
                                 identity   status  isEnabled  \
0          Ana.Mor%40ATEND.com.br@blip.ai  Offline      False   
1  Vitoria.Marques%40ATEND.com.br@blip.ai  Offline      False   
2         Lara.Biz%40ATEND.com.br@blip.ai  Offline      False   

   openedTickets  closedTickets averageFirstResponseTime   averageWaitTime  \
0              0             55                 00:01:32          00:02:04   
1              0             37                 00:03:31          00:04:33   
2              0              1                 00:00:28          00:14:01   

  averageAttendanceTime averageResponseTime  ticketsCount  
0              01:15:31    00:02:35.4526912            55  
1              20:40:05    00:42:44.5839419            37  
2              02:10:59    00:06:16.2087777             1  
```



## Como tenho acesso a essas fun√ß√µes?

1. Importe essas fun√ß√µes;
2. Colete a chave de autentica√ß√£o de seu bot no Blip;

E seja feliz üòé.


## Importando as fun√ß√µes

Para importar essas fun√ß√µes, adicione o seguinte c√≥digo ao seu notebook do Databricks:

```{verbatim}
%run /Library/APICommands
```

## Todo acesso precisa ser autenticado!

Voc√™ precisa da **chave de autentica√ß√£o de seu bot** para consultar o Commands API! 

Acesse a √°rea de "Configura√ß√µes -> Informa√ß√µes de conex√£o" na p√°gina de seu bot no Blip Portal, e, copie o valor do quadro "Cabe√ßalho de autentica√ß√£o".


## Todo acesso precisa ser autenticado!

![](Figuras/info-conexao.png)

## Chave de autentica√ß√£o

Toda chave de autentica√ß√£o √© iniciada por `"Key "`, seguido de um conjunto aleat√≥rio de caracteres.

```{python}
#| eval: false
botKey = 'Key cq936dk_hxdd00_sa...'
```



## D√∫vidas?


## O futuro

Essa nova biblioteca, foi desenvolvida j√° com o objetivo de ser facilmente expandida. E qualquer um de voc√™s podem colaborar com essa expans√£o;


## Hoje temos acesso a apenas 2 recursos

- `get_event_track()`: acessa os dados do recurso (ou *endpoint*) `/event-track`;
- `get_attendants_report()`: acessa os dados do recurso (ou *endpoint*) `/analytics/reports/attendants`;


## Podemos construir fun√ß√µes para outros recursos

- `/contacts`: dados dos usu√°rios;
- `/analytics/reports/tickets`: dados dos tickets no BlipDesk;
- `/contexts`: acesso √†s vari√°veis de contexto de um usu√°rio;

... voc√™ pode conferir a lista completa na [documenta√ß√£o da API](https://docs.blip.ai/?http#analytics)


## Como seria essa expans√£o?

As fun√ß√µes `get_event_track()` e `get_attendants_report()` funcionam com base em 5 classes: 

- `QueryString`;
- `RequestHeader`; 
- `RequestBody`;
- `APICommandsURI`;
- `APICommandsRequest`;.


## Construindo uma requisi√ß√£o

Para acessar os recursos de uma API, voc√™ precisa enviar uma requisi√ß√£o HTTP para essa API. Essa requisi√ß√£o √© em geral composta por tr√™s partes:

- Body;
- Header;
- QueryString;


## Acessando os dados de tickets

```{python}
dia_pesquisa = date.today()

## Construindo o HEADER:
header = RequestHeader(botKey)

## Construindo a QUERY STRING:
query_string = QueryString(startDate = dia_pesquisa, endDate = dia_pesquisa)

## Construindo o BODY:
uri = APICommandsURI('/analytics/reports/attendants')
uri.uri = '/analytics/reports/tickets'
body = RequestBody(uri, query_string)

## Enviando o Request para o Commands API:
resultado = APICommandsRequest(body, header)
resultado.to_pandas_dataframe()
```








