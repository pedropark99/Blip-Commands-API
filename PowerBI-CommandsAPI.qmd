---
title: "Conectando o Power BI com o Blip Commands API"
author: "Pedro Duarte Faria"
format: revealjs
execute:
  echo: true
---

```{python configs}
#| include: false
exec(open("../../botKey.py").read())
exec(open("src/APICommands.py").read())
```




## O que √© o Blip Commands API?

√â uma API do Blip que disponibiliza dados de seu contato inteligente **em tempo real**. 


## Consequ√™ncia

O Databricks possui a limita√ß√£o de seus dados serem em D - 1. J√° o Commands API **n√£o enfrenta essa limita√ß√£o.**


## Consequ√™ncia

Como resultado, com o Commands API, n√≥s n√£o precisamos esperar o dia seguinte para termos acesso aos dados do dia atual!!!ü§Øüî≠



## Em resumo

...qual o objetivo desta apresenta√ß√£o?


## Em resumo

...qual o objetivo desta apresenta√ß√£o?

**Apresentar o Commands API como uma solu√ß√£o de dados em tempo real mais flex√≠vel e eficiente do que os relat√≥rios personalizados do Blip.**




## Relat√≥rios personalizados do Blip

Vantagens:

- R√°pido e simples de se configurar;

Desvantagens:

- Simples at√© demais;
- N√£o permite customiza√ß√£o;


## Commands API

- Permite a constru√ß√£o de uma **solu√ß√£o personalizada**;
- **Experi√™ncia** infinitamente melhor para o cliente; 

Podemos utilizar o programa/framework de nossa prefer√™ncia: 

- Power BI
- `{shiny}` e `{flexdashboard}` (R)
- `{plotly}` e `{dash}` (Python).

<!-- ## Mas como eu posso fornecer esses dados? -->

<!-- - Voc√™ pode orientar o cliente a como utilizar o Commands API; -->
<!-- - Um Power BI que consome os dados do Commands API; -->
<!-- - Um JOB que envia (periodicamente) os dados mais recentes do Commands API; -->
<!-- - Os DEVs de sua c√©lula podem te ajudar a construir um plugin do Blip que converse com o Commands API; -->


## Um exemplo pr√°tico com Power BI

Como seria exatamente o fluxo de dados com o Commands API?


## Fluxo de dados

![](Figuras/PowerPoint/fluxo-dados.png)


## Temos uma biblioteca nova! ü•≥

Para facilitar o uso da Commands API, duas fun√ß√µes foram desenvolvidas para os APIN's:

- `get_event_track()`;
- `get_attendants_report()`;



## `get_event_track()`

Essa fun√ß√£o possui os seguintes argumentos:

- `botKey`: a chave de autentica√ß√£o;
- `tracking`: a *category* do tracking;
- `startDate`: a data de in√≠cio da pesquisa;
- `endDate`: a data de fim da pesquisa;
- `take` (**opcional**): quantidade m√°xima de resultados que voc√™ deseja trazer;
- `action` (**opcional**): a *action* espec√≠fica que voc√™ deseja pesquisar;


## Exemplos:

```{python}
#| eval: true
from datetime import date
dia_pesquisa = date(2022,7,7)
r = get_event_track(
  botKey, 
  tracking = "Sodexo consulta solicitacao e bloqueio selecao",
  startDate = dia_pesquisa, endDate = dia_pesquisa
)

print(r)
```



## Como posso utilizar essas fun√ß√µes?

1. Importe essas fun√ß√µes;
2. Colete a chave de autentica√ß√£o de seu bot no Blip;

E seja feliz üòé.


## Importando as fun√ß√µes

Para importar essas fun√ß√µes, adicione o seguinte c√≥digo ao seu notebook do Databricks:

```{verbatim}
%run /Library/APICommands
```

## Todo acesso precisa ser autenticado!

Voc√™ precisa da **chave de autentica√ß√£o de seu bot** para consultar o Commands API! 

Acesse a √°rea de "Configura√ß√µes -> Informa√ß√µes de conex√£o" na p√°gina de seu bot no Blip Portal, e, copie o valor do quadro "Cabe√ßalho de autentica√ß√£o".


## Todo acesso precisa ser autenticado!

![](Figuras/info-conexao.png)

## Chave de autentica√ß√£o

Toda chave de autentica√ß√£o √© iniciada por `"Key "`, seguido de um conjunto aleat√≥rio de caracteres. Nos pr√≥ximos slides, vou me referir a essa chave atrav√©s da vari√°vel `botKey`.

```{python}
#| eval: false
botKey = 'Key cq936dk_hxdd00_sa...'
```




## Que tipo de dados voc√™ encontra nessa API?

- `/event-track`: registros de trackings;
- `/contacts`: dados dos usu√°rios;
- `/analytics/reports/attendants`: dados dos atendentes no BlipDesk;
- `/analytics/reports/tickets`: dados dos tickets no BlipDesk;

... voc√™ pode conferir a lista completa na [documenta√ß√£o da API](https://docs.blip.ai/?http#analytics)


## Construindo uma requisi√ß√£o

Para acessar os recursos de uma API, voc√™ precisa enviar uma requisi√ß√£o HTTP para essa API. Essa requisi√ß√£o √© em geral composta por tr√™s partes:

- Body;
- Header;
- QueryString;


## Construindo uma QueryString





